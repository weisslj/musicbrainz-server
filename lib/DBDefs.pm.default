#!/usr/bin/env perl

use warnings;
# vi: set ts=4 sw=4 :
#____________________________________________________________________________
#
#   MusicBrainz -- the open internet music database
#
#   Copyright (C) 1998 Robert Kaye
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   $Id$
#____________________________________________________________________________

package DBDefs;

################################################################################
# Directories
################################################################################

# The server root, i.e. the parent directory of admin, bin, lib, root, etc.
sub MB_SERVER_ROOT    { "/home/httpd/musicbrainz/musicbrainz-server" }
# Where static files are located
sub STATIC_FILES_DIR { MB_SERVER_ROOT . '/root/static' }

################################################################################
# The Database
################################################################################

use MusicBrainz::Server::DatabaseConnectionFactory;
MusicBrainz::Server::DatabaseConnectionFactory->register_databases(
    # How to connect when we need read-write access to the database
    READWRITE => {
        database    => "musicbrainz_db",
        schema          => "musicbrainz",
        username    => "musicbrainz",
        password        => "musicbrainz",
#       host            => "",
#       port            => "",
    },
    # How to connect for read-only access.  See "REPLICATION_TYPE" (below)
    # READONLY => undef,
    # How to connect for administrative access
    SYSTEM    => {
        database    => "template1",
        username    => "postgres",
#       password        => "",
#       host            => "",
#       port            => "",
    },
    # Fill out only if RAWDATA lives on a different host from the READWRITE server.
    # RAWDATA_SYSTEM => undef,
);

# The schema sequence number.  Must match the value in
# replication_control.current_schema_sequence.
sub DB_SCHEMA_SEQUENCE { 14 }

# What type of server is this?
# * RT_MASTER - This is a master replication server.  Changes are allowed, and
#               they result in replication packets being produced.
# * RT_SLAVE  - This is a slave replication server.  After loading a snapshot
#               produced by a master, the only changes allowed are those made
#               by applying the next replication packet in turn.  If the slave
#               server is not going to be used for development work, change
#               DB_STAGING_SERVER to 0.
# * RT_STANDALONE - This server neither generates nor uses replication
#               packets.  Changes to the database are allowed.
use MusicBrainz::Server::Replication ':replication_type';
sub REPLICATION_TYPE { RT_STANDALONE }

################################################################################
# HTTP Server Names
################################################################################

# The host names used by the server.
# To use a port number other than 80, add it like so: "myhost:8000"
sub WEB_SERVER                { "www.musicbrainz.example.com" }
sub LUCENE_SERVER             { "search.musicbrainz.org" }
sub WEB_SERVER_USED_IN_EMAIL  { WEB_SERVER }

################################################################################
# Mail Settings
################################################################################

sub SMTP_SERVER { "localhost" }

# This value should be set to some secret value for your server.  Any old
# string of stuff should do; something suitably long and random, like for
# passwords.  However you MUST change it from the default
# value (the empty string).  This is so an attacker can't just look in CVS and
# see the default secret value, and then use it to attack your server.
sub SMTP_SECRET_CHECKSUM { "" }
sub EMAIL_VERIFICATION_TIMEOUT { 604800 } # one week

################################################################################
# Server Settings
################################################################################

# Set this to 0 if this is the master MusicBrainz server or a slave mirror.
# Keeping this defined enables the banner that is shown across the top of each
# page, as well as some testing features that are only enabled when not on
# the live server.
sub DB_STAGING_SERVER { 1 }

# This description is shown in the banner when DB_STAGING_SERVER is enabled.
# If left undefined the default value will be shown.
# Default: "This is a MusicBrainz development server."
sub DB_STAGING_SERVER_DESCRIPTION { "" }

# Only change this if running a non-sanitized database on a dev server,
# e.g. http://test.musicbrainz.org.
sub DB_STAGING_SERVER_SANITIZED { 1 }

# Testing features enable "Accept edit" and "Reject edit" links on edits,
# this should only be enabled on staging servers.
sub DB_STAGING_TESTING_FEATURES { DB_STAGING_SERVER }

################################################################################
# Documentation Server Settings
################################################################################
sub WIKITRANS_SERVER     { "wiki.musicbrainz.org" }

# The path to MediaWiki's api.php file. This is required to automatically
# determine which documentation pages need to be updated in the
# transclusion table.
sub WIKITRANS_SERVER_API { "wiki.musicbrainz.org/-/api.php" }

sub WIKITRANS_INDEX_FILE { MB_SERVER_ROOT() . "/root/static/wikidocs/index.txt" }
sub WIKITRANS_INDEX_URL  { "http://musicbrainz.org/static/wikidocs/index.txt" }

################################################################################
# Cache Settings
################################################################################

# MEMCACHED_SERVERS allows configuration of global memcached servers, if more 
# close configuration is not required
sub MEMCACHED_SERVERS { return ['127.0.0.1:11211']; };

# MEMCACHED_NAMESPACE allows configuration of a global memcached namespace, if
# more close configuration is not required
sub MEMCACHED_NAMESPACE { return 'MB:'; };

# PLUGIN_CACHE_OPTIONS are the options configured for Plugin::Cache.  $c->cache
# is provided by Plugin::Cache, and is required for HTTP Digest authentication
# in the webservice (Catalyst::Authentication::Credential::HTTP).
#
# Using Cache::Memory is good for a development environment, but is likely not
# suited for production.  Use something like memcached in a production setup.
#
# If you want to use something such as Memcached, the settings here should be
# the same as the settings you use for the session store.
#
sub PLUGIN_CACHE_OPTIONS {
    return {
#        class => "Cache::Memory",
        class => "Cache::Memcached::Fast",
        servers => MEMCACHED_SERVERS(),
        namespace => MEMCACHED_NAMESPACE(),
    };
};

# Use memcached and a small in-memory cache, see below if you
# want to disable caching
#
# The caching options here relate to object caching - such as caching artists,
# releases, etc in order to speed up queries. If you are using Memcached
# to store sessions as well this should be a *different* memcached server.
our %CACHE_MANAGER_OPTIONS = (
    profiles => {
        memory => {
            class => 'Cache::Memory',
            wrapped => 1,
            keys => [qw( at g c lng lt mf rgt rs rp scr wt )],
            options => {
                default_expires => '1 hour',
            },
        },
        external => {
            class => 'Cache::Memcached::Fast',
            options => {
                servers => MEMCACHED_SERVERS(),
                namespace => MEMCACHED_NAMESPACE()
            },
        },
    },
    default_profile => 'external',
);

# No caching
#our %CACHE_MANAGER_OPTIONS = (
#    profiles => {
#        null => {
#            class => 'Cache::Null',
#            wrapped => 1,
#        },
#    },
#    default_profile => 'null',
#);

sub CACHE_MANAGER_OPTIONS { \%CACHE_MANAGER_OPTIONS }

################################################################################
# Rate-Limiting
################################################################################

# The "host:port" of the ratelimit server ($MB_SERVER/bin/ratelimit-server).
# If undef, the rate-limit code always returns undef (as it does if there is
# an error).
# Just like the memcached server settings, there is NO SECURITY built into the
# ratelimit protocol, so be careful about enabling it.
sub RATELIMIT_SERVER { undef }

################################################################################
# Minify settings
################################################################################

# The following two values determine how scripts and styles are minified. By
# default, a dummy minifier is used:
sub MINIFY_DUMMY { my %args = @_; return $args{input}; }
sub MINIFY_SCRIPTS { return \&MINIFY_DUMMY; }
sub MINIFY_STYLES { return \&MINIFY_DUMMY; }

# If you wish to minify either javascript or css, uncomment the following lines
# and install the neccesary CPAN packages.
# sub MINIFY_SCRIPTS { use Javascript::Closure; return \&Javascript::Closure::minify }
# sub MINIFY_STYLES { use CSS::Minifier; return \&CSS::Minifier::minify }

################################################################################
# Other Settings
################################################################################

# Set this value to something true (e.g. 1) to set the server to read-only.
# To date, this option is widely ignored in the code; don't be surprised if you
# set it to true and find that writes are still possible.
sub DB_READ_ONLY { 0 }

# Set this value to a message that you'd like to display to users when
# they attempt to write to your read-only database (not used if DB_READ_ONLY
# is false)
sub DB_READ_ONLY_MESSAGE { <<EOF }
This server is temporarily in read-only mode
for database maintainance.
EOF

# This defines the version of the server.  Only used by things which display
# the server version, e.g. at the foot of each web page.  Basically it can be
# whatever you want. If you leave it blank, the current subversion revision
# will be shown (if subversion is in use).
sub VERSION { "master" }

# How long (in seconds) a web/rdf session can go "idle" before being timed out
sub WEB_SESSION_SECONDS_TO_LIVE { 3600 * 3 }

# The cookie name to use
sub SESSION_COOKIE { "AF_SID" }
# The domain into which the session cookie is written
sub SESSION_DOMAIN { undef }

# How long an annotation is considered as being locked.
sub ANNOTATION_LOCK_TIME { 60*15 }

# Amazon associate and developer ids
my %amazon_store_associate_ids = (
    'amazon.ca'         => 'musicbrainz01-20',
    'amazon.co.jp'    => 'musicbrainz-22',
    'amazon.co.uk'    => 'musicbrainz0c-21',
    'amazon.com'    => 'musicbrainz0d-20',
    'amazon.de'         => 'musicbrainz00-21',
    'amazon.fr'         => 'musicbrainz0e-21',
    'amazon.it'         => '', #TODO: Someone should probably sign up for an associate ID.
);

sub AWS_ASSOCIATE_ID
{
    return keys %amazon_store_associate_ids if not @_;
    return $amazon_store_associate_ids{$_[0]};
}

sub AWS_PRIVATE { '' }
sub AWS_PUBLIC { '' }

sub AMAZON_ASSOCIATE_TAG { '' }

################################################################################
# Sessions (advanced)
################################################################################

# Unless you are installing an MusicBrainz server that needs to be fully r
# redundant/load balanced, you do not need to change anything in this section.

# If you're using multiple front-end webservers make sure they all connect to
# the same memcached server.  Also make sure enough memory is configured for
# memcached so sessions aren't evicted from the cache.
sub SESSION_STORE { "Session::Store::Memcached" }
sub SESSION_STORE_ARGS
{
    {
        memcached_new_args => {
            {
                data => MEMCACHED_SERVERS(),
                namespace => MEMCACHED_NAMESPACE(),
                memcached_class => 'Cache::Memcached::Fast',
            }
        }
        
    }
}

# MusicBrainz::Server::Wizard saves wizard sessions in memcached,
# seperately from the regular session store.
sub WIZARD_MEMCACHED
{
    return { servers => MEMCACHED_SERVERS(), namespace => MEMCACHED_NAMESPACE() };
}

sub USE_ETAGS { 1 }

sub CATALYST_DEBUG { 1 }

# If you are developing on MusicBrainz, you should set this to a true value
# This will turn off some optimizations (such as CSS/JS compression) to make
# developing and debuging easier
sub DEVELOPMENT_SERVER { 1 }

# Please activate the officially approved languages here. Not every .po
# file is active because we might have fully translated languages which
# are not yet properly supported, like right-to-left languages
sub MB_LANGUAGES {qw()}

# Private, please do not change
sub _RUNNING_TESTS { 0 }

# Set this to an email address and the server will email any bugs to you
sub EMAIL_BUGS { undef }

################################################################################
# Profiling
################################################################################
# Set these to >0 to enable profiling

# Log if a request in /ws takes more than x seconds
sub PROFILE_WEB_SERVICE { 0 }

# Log if a request in / (not /ws) takes more than x seconds
sub PROFILE_SITE { 0 }

# If you want the FastCGI processes to restart, configure this
sub AUTO_RESTART {
#    return {
#        active => 1,
#        check_each => 10,
#        max_bits => 134217728,
#        min_handled_requests => 100
#    }
}

# The maximum amount of time a process can be serving a single request
# If undef, the process is never killed
# If set to a positive integer, the process can server a single request
# for MAX_REQUEST_TIME seconds, and if it is still not done the process
# will be killed (and log a message about the request it was serving).
sub MAX_REQUEST_TIME { undef }

sub LOGGER_ARGUMENTS {
    return (
        outputs => [
            [ 'Screen', min_level => 'debug', newline => 1 ],
        ],
    )
}

1;
# eof DBDefs.pm
